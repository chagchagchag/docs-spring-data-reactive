{"/":{"title":"Introduction","data":{"":"Spring Data Reactive 문서보관소입니다."}},"/spring-data-mongodb-reactive/mongodb-features":{"title":"Mongodb Features","data":{"mongodb-features#MongoDB Features":"","mongo-db#Mongo DB":"MongoDB 는 오픈소스 NoSQL 데이터베이스입니다. 2007 년 10gen 이라는 회사에서 Paas 로 MongoDB 개발을 시작했고, 2009 년에 오픈소스 모델로 전환해서 사용지원, 기타 서비스를 제공하는 방식을 따르게 되었습니다. 2013년에는 10gen 이라는 회사 명이 MongoDB Inc. 로 변경되었으며 현재 전 세계에서 대중적으로 알려진 NoSQL 데이터베이스가 되었습니다.스키마가 정의되어 있지 않아도 데이터 저장을 유연하게 할 수 있습니다. 또한 다양한 종류의 index를 지원하고, 4.0 부터 multi docoument transaction 을 지원하기에 트랜잭션의 ACID 가 보장됩니다.몽고DB를 운영할 때 레플리카셋과 샤드 클러스터를 적용하면 데이터를 여러 노드에 분산해서 저장하고 처리하는 것이 가능해지며, 장애에 내성이 강한 데이터베이스로 전환이 가능합니다.","mongodb-bson#MongoDB BSON":"Binary 형식의 JSON 데이터를 BSON 이라고 부릅니다. MongoDB는 데이터를 BSON 형식으로 저장합니다.BSON 은 JSON 보다 인코딩/디코딩이 빠르고, 다양한 데이터 타입들이 BSON 에 지원됩니다.\ndocument id : ObjectId\n바이너리 데이터 : BinData\n날짜 : Date, ISODate\n정규표현식","mongodb-bson-인코딩#MongoDB BSON 인코딩":"BSON 은 필드의 순서에 따라서 인코딩이 달라지며, 첫줄은 document 의 크기를 의미합니다.","mongodb-document-collection-database#MongoDB Document, Collection, Database":"","mongodb-트랜잭션#MongoDB 트랜잭션":""}},"/spring-data-mongodb-reactive/mongodb-tools":{"title":"Mongodb Tools","data":{"mongodb-설치시-필요한-도구들-및-설치관련-내용들-정리#MongoDB 설치시 필요한 도구들 및 설치관련 내용들 정리":"","mongodb-클라우드-인스턴스#MongoDB 클라우드 인스턴스":"문서 작성을 위한 용도로 사용하는 MongoDB는 Atlas MongoDB 를 사용했습니다. 개발PC가 점점 노후화 되어서 팬 소음도 너무 크고 가끔은 컴퓨터가 터질것 같아 선택하게 되었습니다. 데이터베이스 등급은 무료 인스턴스를 선택했습니다.","mongodb-docker#MongoDB docker":"로컬에서만 실행하시거나, testcontainers 를 사용중이시라면, docker-compose 파일을 만들어두고 이것을 읽어들이는게 제일 편하고 빠릅니다. 이런 이유로 이번 문서에서는 docker-compose 파일도 추가해둡니다.","single-broker#single broker":"브로커 1기만 갖춰진 docker-compose 파일입니다.\nversion: '3.8'\r\nservices:\r\n  mongo:\r\n    image: mongo:6.0.5\r\n    ports:\r\n      - 27017:27017\r\n    environment:\r\n      MONGO_INITDB_DATABASE: foobar\r\n      MONGO_INITDB_ROOT_USERNAME: root\r\n      MONGO_INITDB_ROOT_PASSWORD: 1111","multi-broker#multi broker":"","mongodb-compass#MongoDB compass":"Mongodb Compass\nwindows :\nhttps://downloads.mongodb.com/compass/mongodb-compass-1.42.3-win32-x64.msi\n접속 URL : mongodb+srv://유저명:<password>@[서버주소]/\nmacos :\nhttps://downloads.mongodb.com/compass/mongodb-compass-1.42.3-darwin-arm64.dmg\n접속 URL : mongodb+srv://유저명:<password>@[서버주소]/","mongodb-data-explorer#MongoDB Data Explorer":"설치한 Atlas 인스턴스는 Compass 로도 접속할 수 있겠지만, 브라우저에서 사용가능한 Mongodb Data Explorer 로도 접속가능합니다.\nhttps://cloud.mongodb.com","mongoose#mongoose":"몽구스를 이용한 스키마 모델링 방법도 있습니다.설치\nyarn add mongooose\nMongoose 사용법에 대해서는 시간이 되는대로 정리하겠습니다.","mongodb-shell#MongoDB Shell":"","설치--환경변수-등록#설치 & 환경변수 등록":"windows\nhttps://downloads.mongodb.com/compass/mongosh-2.0.0-x64.msi 다운로드 & 설치\nmongosh \"mongodb+srv://[접속주소]\" --apiVersion 1 --username [유저명]\nmacos\nbrew isntall mongosh\nmongosh \"mongodb+srv://[접속주소]\" --apiVersion 1 --username [유저명]\nbrew install 이 아닌 Manually Install 을 원하신다면 Install Mongosh → Procedure → macOS 를 선택해주세요. 그리고 사용가능한 바이너리를 확인하시려면  Install from .zip File. 을 확인해주세요.\nMS윈도우즈 사용자의 경우 다운로드 받은 mongosh 파일을 Path 에 추가시킨 후 터미널에서 접근 가능합니다. MacOS 사용자의 경우에도 brew 로 설치하기보다는 별도로 다운로드 받은 디렉터리를 추가하고 싶다면 별도로 바이너리를 다운받으신후 Path 에 추가해주시면 됩니다.제 경우에는 MacOS 를 사용할 때에는 ~/username/workspace/bin 같은 디렉터리에 바이너리를 모아두었었는데, Manually Install 방식이 친절하게 제공되면 Manually Install 로 설치 후에 필요 없어지면 관련 디렉터리를 지워버리는 방식으로 가능하면 이 방식으로 설치를 했습니다. 가끔은 불편하더라도 나중에 관리가 깔끔하게 되려면 오히려 이런 방식이 더 편한 것 같습니다.","database-선택-접근#Database 선택, 접근":"### 데이터베이스 선택\r\nuse [데이터베이스명]\r\n\r\n### 현재 사용중인 데이터베이스 확인\r\ndb\r\n\r\n### 서버 내의 데이터베이스 리스트\r\n### 최소 한개의 Document 를 가진 DB만 출력됩니다.\r\nshow dbs\r\n\r\n### 컬렉션에 Document insert\r\ndb.[컬렉션명].insertOne({k:v, ...})\r\n\r\n### db 내에 도큐먼트 조회\r\ndb.[데이터베이스명].find()"}},"/spring-data-mongodb-reactive":{"title":"Spring Data Mongodb Reactive","data":{"spring-data-mongodb-reactive#Spring Data MongoDB Reactive":""}},"/spring-data-redis-reactive":{"title":"Spring Data Redis Reactive","data":{}},"/spring-data-r2dbc":{"title":"Spring Data R2DBC","data":{}}}